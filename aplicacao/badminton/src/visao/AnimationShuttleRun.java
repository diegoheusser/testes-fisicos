/*
 * 8,5 km/h  leva 8 segundos para 20 metros
 * int velocidade = 47 é equivalenta a 8,5 km/h
 * nivel 1 = 7,5 voltas
 * ((distancia/1000) / velocidadeMedia )= tempo em horas
 */
package visao;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.DecimalFormat;
import java.util.Timer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import javax.swing.filechooser.FileNameExtensionFilter;
import visao.AthleteBrown;
import visao.AthleteGreen;
import visao.AthleteRed;
import util.Cronometro;

/**
 *
 * @author Diego
 */
public class AnimationShuttleRun extends javax.swing.JFrame {

    //boneco marrom
    private AthleteBrown brown;
    private boolean backBrown, parado;
    //boneco verde
    private AthleteGreen green;
    private boolean backGreen;
    //boneco vermelho
    private AthleteRed red;
    private boolean backRed;
    //ShuttleRun
    private int xBrown, yBrown, xGreen, yGreen, xRed, yRed;//posições dos bonecos no plano cartesiano
    private Timer timer = new Timer();
    private int nivel;
    private double velocidadeMedia;
    private Cronometro cronometro = new Cronometro();
    private boolean stop = false;//booleano para para as animações
    public int elimina;//contador do números de beeps 

    /**
     * Creates new form Animacao20MetrosDeCorrida
     */
    public AnimationShuttleRun() {
        initComponents();
        components();
        this.elimina = 0;
        this.btStart.requestFocus();
        this.nivel = 1;
        this.velocidadeMedia = 8.5;
        //evento que sera disparado na hora de fechar o frame 
        setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);//não faz nada quando clica no X
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent evt) {
                if (cronometro != null) {
                    cronometro.cancel();//cancela a execução do cronometro
                }
                if (brown != null) {
                    brown.cancel(true);//cancela a animação do boneco marrom
                }
                if (green != null) {
                    green.cancel(true);//cancela a animação do boneco verde
                }
                if (red != null) {
                    red.cancel(true);//cancela a animação do boneco vermelho
                }
                setVisible(false);//esconde o frame
            }
        });
    }

    public void components() {
        //booleanos para verificar a direção em que o boneco vai correr
        this.backBrown = false;
        this.backGreen = false;
        this.backRed = false;
        //Escondendo os bonecos
        this.bonecoBrown.setVisible(false);
        this.bonecoGreen.setVisible(false);
        this.bonecoRed.setVisible(false);
        //Escondendo os labels da situção de cada boneco
        this.tfSituacaoBrown.setVisible(false);
        this.tfSituacaoGreen.setVisible(false);
        this.tfSituacaoRed.setVisible(false);
        this.lbBrown.setVisible(false);
        this.lbGreen.setVisible(false);
        this.lbRed.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bonecoBrown = new javax.swing.JLabel();
        bonecoGreen = new javax.swing.JLabel();
        bonecoRed = new javax.swing.JLabel();
        lbConeDireito = new javax.swing.JLabel();
        lbConeEsquerdo = new javax.swing.JLabel();
        lbConeEsquerdo2 = new javax.swing.JLabel();
        lbConeDireito2 = new javax.swing.JLabel();
        lbConeEsquerdo3 = new javax.swing.JLabel();
        lbConeDireito3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        btPlay = new javax.swing.JButton();
        btStart = new javax.swing.JButton();
        tfCronometro = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        tfVelocidade = new javax.swing.JTextField();
        tfNivel = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        tfDistancia = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        lbBrown = new javax.swing.JLabel();
        lbGreen = new javax.swing.JLabel();
        lbRed = new javax.swing.JLabel();
        tfSituacaoBrown = new javax.swing.JTextField();
        tfSituacaoGreen = new javax.swing.JTextField();
        tfSituacaoRed = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Teste 20 metros de Corrida");
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        bonecoBrown.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        bonecoBrown.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/imagens/x_runner_v1.gif")));
        getContentPane().add(bonecoBrown, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 130, 190, 190));

        bonecoGreen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/imagens/green_runner_v1.gif")));
        getContentPane().add(bonecoGreen, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 100, -1, -1));

        bonecoRed.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/imagens/red_runner_v1.gif")));
        getContentPane().add(bonecoRed, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 100, -1, -1));

        lbConeDireito.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/imagens/cone.png")));
        getContentPane().add(lbConeDireito, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 250, -1, 70));

        lbConeEsquerdo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/imagens/cone.png")));
        getContentPane().add(lbConeEsquerdo, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 250, -1, 70));

        lbConeEsquerdo2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/imagens/cone2.png")));
        getContentPane().add(lbConeEsquerdo2, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 200, -1, -1));

        lbConeDireito2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/imagens/cone2.png")));
        getContentPane().add(lbConeDireito2, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 200, -1, -1));

        lbConeEsquerdo3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/imagens/cone3.png")));
        getContentPane().add(lbConeEsquerdo3, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 160, -1, -1));

        lbConeDireito3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/imagens/cone3.png")));
        getContentPane().add(lbConeDireito3, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 160, -1, -1));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("<---------------------------------------------- 20 metros ------------------------------------------>");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 310, 1010, 30));

        btPlay.setText("Pausar");
        btPlay.setEnabled(false);
        btPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btPlayActionPerformed(evt);
            }
        });
        getContentPane().add(btPlay, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 530, -1, -1));

        btStart.setText("Iniciar");
        btStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btStartActionPerformed(evt);
            }
        });
        getContentPane().add(btStart, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 530, -1, -1));

        tfCronometro.setEditable(false);
        tfCronometro.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(tfCronometro, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 360, 90, -1));

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Tempo:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 360, 50, -1));

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Velocidade Média:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 390, 130, -1));

        tfVelocidade.setEditable(false);
        tfVelocidade.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(tfVelocidade, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 390, 90, -1));

        tfNivel.setEditable(false);
        tfNivel.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(tfNivel, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 420, 90, -1));

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Nível:");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(424, 420, 80, -1));

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Distância:");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(417, 450, 90, -1));

        tfDistancia.setEditable(false);
        tfDistancia.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(tfDistancia, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 450, 90, -1));

        jButton1.setText("Salvar Audio");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 530, -1, -1));

        lbBrown.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbBrown.setForeground(new java.awt.Color(112, 101, 95));
        lbBrown.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbBrown.setText("Atleta Marrom:");
        getContentPane().add(lbBrown, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 360, 130, -1));

        lbGreen.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbGreen.setForeground(new java.awt.Color(0, 104, 56));
        lbGreen.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbGreen.setText("Atleta Verde:");
        getContentPane().add(lbGreen, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 400, 130, -1));

        lbRed.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbRed.setForeground(new java.awt.Color(153, 0, 0));
        lbRed.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbRed.setText("Atleta Vermelho:");
        getContentPane().add(lbRed, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 440, 130, -1));

        tfSituacaoBrown.setEditable(false);
        tfSituacaoBrown.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        tfSituacaoBrown.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tfSituacaoBrown.setText("OK");
        tfSituacaoBrown.setFocusable(false);
        getContentPane().add(tfSituacaoBrown, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 360, 130, -1));

        tfSituacaoGreen.setEditable(false);
        tfSituacaoGreen.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        tfSituacaoGreen.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tfSituacaoGreen.setText("OK");
        tfSituacaoGreen.setFocusable(false);
        getContentPane().add(tfSituacaoGreen, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 400, 130, -1));

        tfSituacaoRed.setEditable(false);
        tfSituacaoRed.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        tfSituacaoRed.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tfSituacaoRed.setText("OK");
        tfSituacaoRed.setFocusable(false);
        getContentPane().add(tfSituacaoRed, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 440, 130, -1));

        setSize(new java.awt.Dimension(1035, 623));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btStartActionPerformed
        if (btStart.getText().equals("Iniciar")) {//quando o botão for iniciar
            startButton();//evento do botão iniciar
        } else {//quando o botão for cancelar
            cancelButton();//evento do botão cancelar
        }
    }//GEN-LAST:event_btStartActionPerformed

    private void btPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btPlayActionPerformed
        if (stop) {//quando o botão for pause
            stopButton();
        } else {//quando o botão for continuar
            playButton();
        }
    }//GEN-LAST:event_btPlayActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        chooser();
    }//GEN-LAST:event_jButton1ActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel bonecoBrown;
    private javax.swing.JLabel bonecoGreen;
    private javax.swing.JLabel bonecoRed;
    private javax.swing.JButton btPlay;
    private javax.swing.JButton btStart;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel lbBrown;
    private javax.swing.JLabel lbConeDireito;
    private javax.swing.JLabel lbConeDireito2;
    private javax.swing.JLabel lbConeDireito3;
    private javax.swing.JLabel lbConeEsquerdo;
    private javax.swing.JLabel lbConeEsquerdo2;
    private javax.swing.JLabel lbConeEsquerdo3;
    private javax.swing.JLabel lbGreen;
    private javax.swing.JLabel lbRed;
    private javax.swing.JTextField tfCronometro;
    private javax.swing.JTextField tfDistancia;
    private javax.swing.JTextField tfNivel;
    private javax.swing.JTextField tfSituacaoBrown;
    private javax.swing.JTextField tfSituacaoGreen;
    private javax.swing.JTextField tfSituacaoRed;
    private javax.swing.JTextField tfVelocidade;
    // End of variables declaration//GEN-END:variables

    public void run() throws Exception {// metodo que executa a animação
        stop = true;
        //coordenadas do boneco marrom
        xBrown = bonecoBrown.getX();//posição x do boneco marrom
        yBrown = bonecoBrown.getY();//posição y do boneco marrom
        //coordenadas do boneco verde
        xGreen = bonecoGreen.getX();//posição x do boneco verde
        yGreen = bonecoGreen.getY();//posição y do boneco verde
        //coordenadas do boneco vermelho
        xRed = bonecoRed.getX();//posição x do boneco vermelho
        yRed = bonecoRed.getY();//posição y do boneco vermelho

        //inicia a animação do boneco marrom
        brown = new AthleteBrown(this, xBrown, yBrown);
        if (brown.getState().equals(SwingWorker.StateValue.DONE)) {
            try {
                brown.run();
            } catch (Exception ex) {
            }
        } else if (brown.getState().equals(SwingWorker.StateValue.PENDING)) {
            brown.execute();//inicia o movimento do boneco
        }
        //inicia a animação do boneco verde
        green = new AthleteGreen(this, xGreen, yGreen);
        if (green.getState().equals(SwingWorker.StateValue.DONE)) {
            try {
                green.run();
            } catch (Exception ex) {
            }
        } else if (green.getState().equals(SwingWorker.StateValue.PENDING)) {
            green.execute();//inicia o movimento do boneco
        }
        //inicia a animação do boneco vermelho
        red = new AthleteRed(this, xRed, yRed);
        if (red.getState().equals(SwingWorker.StateValue.DONE)) {
            try {
                red.run();
            } catch (Exception ex) {
            }
        } else if (red.getState().equals(SwingWorker.StateValue.PENDING)) {
            red.execute();//inicia o movimento do boneco
        }
    }

    private void moveBonecoBrown(int x, int y) {// metodo que move o boneco marrom
        bonecoBrown.setBounds(x, y, bonecoBrown.getWidth(), bonecoBrown.getHeight());
    }

    private void moveBonecoGreen(int x, int y) {// metodo que move o boneco verde
        bonecoGreen.setBounds(x, y, bonecoGreen.getWidth(), bonecoGreen.getHeight());
    }

    private void moveBonecoRed(int x, int y) {// metodo que move o boneco vermelho
        bonecoRed.setBounds(x, y, bonecoRed.getWidth(), bonecoRed.getHeight());
    }

    public boolean atualizaInterface(int xis, int ipslon, boolean back, double distancia, int boneco) {//metodo para atualizar a posição do boneco na interface
        if (boneco == 1) {
            this.backBrown = back;//booleano para verificar se o boneco está voltando
            if (cronometro.isAtulizaMinuto()) {
                cronometro.setAtulizaMinuto(false);
                nivel++;//aumenta um nível
                velocidadeMedia += 0.5;
                brown.velocidade -= (brown.velocidade * 0.055);// aumenta a velocidade em que o boneco vai se mover
                this.tfVelocidade.setText(String.valueOf(velocidadeMedia) + " km/h");//atualiza a velocidade média
                this.tfNivel.setText(String.valueOf(nivel));//atualiza o nível
                velocidadeBonecoBrown(this.backBrown);//aumenta a velocidade od boneco marrom
            }

            DecimalFormat df = new DecimalFormat("0.000");//formata a distância
            this.tfDistancia.setText(df.format(distancia) + " m");//mostra a distância em metros JTextField
            moveBonecoBrown(xis, ipslon);// metodo para move o boneco
            if (xis == 870) {//posição do cone 2
                velocidadeBonecoBrown(!backBrown);//muda a direção do boneco marrom
            }
            if (xis == 0) {//posição do cone 1
                velocidadeBonecoBrown(!backBrown);//muda a direção do boneco marrom
            }
        }
        if (boneco == 2) {
            this.backGreen = back;//booleano para verificar se o boneco está voltando
            if (cronometro.isAtulizaMinuto()) {
                green.velocidade -= 2;// aumenta a velocidade em que o boneco vai se mover
                velocidadeBonecoGreen(this.backGreen);
            }
            moveBonecoGreen(xis, ipslon);// metodo para move o boneco
            if (xis == 820 && !green.elimina) {//posição do cone 4
                velocidadeBonecoGreen(!backGreen);//muda a direção do boneco verde
            }
            if (xis == 90 && !green.elimina) {//posição do cone 3
                velocidadeBonecoGreen(!backGreen);//muda a direção do boneco verde
            }
        }
        if (boneco == 3) {
            if (cronometro.isAtulizaMinuto()) {
                red.velocidade -= 8;
            }
            this.backRed = back;//booleano para verificar se o boneco está voltando
            if (cronometro.isAtulizaMinuto()) {
                velocidadeBonecoRed(this.backRed);
            }
            moveBonecoRed(xis, ipslon);// metodo para move o boneco
            if (xis == 750 && !red.elimina) {//posição do cone 6
                velocidadeBonecoRed(!backRed);//muda a direção do boneco vermelho
            }
            if (xis == 190 && !red.elimina) {//posição do cone 5
                velocidadeBonecoRed(!backRed);//muda a direção do boneco vermelho
            }
        }
        eliminaBoneco(this.elimina);

        return this.stop;
    }

    private void clearScreen() {//método para limpar os componentes da tela
        this.tfCronometro.setText("");//limpa o cronometro
        this.tfNivel.setText("");//limpa o nivel
        this.tfVelocidade.setText("");//limpa a velocidade media
        this.tfDistancia.setText("");//limpa a distancia
    }

    private void velocidadeBonecoBrown(boolean back) {//aumenta a velocidade do gif marrom
        if (back) {//gifs do boneco marrom no sentido esquerda para direita
            switch (nivel) {
                case 1://velocidade um do gif do boneco marrom
                    bonecoBrown.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/imagens/back_x_runner_v1.gif")));
                    break;
                case 2://vrlocidade quatro do gif do boneco marrom
                    bonecoBrown.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/imagens/back_x_runner_v4.gif")));
                    break;
            }
        } else {//gifs do boneco marrom no sentido direita para esquerda
            switch (nivel) {
                case 1://velocidade um do gif do boneco marrom
                    bonecoBrown.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/imagens/x_runner_v1.gif")));
                    break;
                case 2://vrlocidade quatro do gif do boneco marrom
                    bonecoBrown.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/imagens/x_runner_v4.gif")));
                    break;
            }
        }

    }

    private void velocidadeBonecoGreen(boolean back) {//aumenta a velocidade do gif verde
        if (back) {//gifs do boneco verde no sentido esquerda para direita
            switch (nivel) {
                case 1://velocidade um do boneco verde
                    bonecoGreen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/imagens/back_green_runner_v1.gif")));
                    break;
                case 2://velocidade quatro do boneco verde
                    bonecoGreen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/imagens/back_green_runner_v4.gif")));
                    break;
            }
        } else {//gifs do boneco verde no sentido direita para esquerda
            switch (nivel) {
                case 1://velocidade um do boneco verde
                    bonecoGreen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/imagens/green_runner_v1.gif")));
                    break;
                case 2://velocidade quatro do boneco verde
                    bonecoGreen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/imagens/green_runner_v4.gif")));
                    break;
            }
        }
    }

    private void velocidadeBonecoRed(boolean back) {//aumenta a velocidade do gif vermelho
        if (back) {//gifs do boneco vermelho no sentido esquerda para direita
            switch (nivel) {
                case 1://velocidade um do boneco vermelho
                    bonecoRed.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/imagens/back_red_runner_v1.gif")));
                    break;
                case 2://velocidade quatro do boneco vermelho
                    bonecoRed.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/imagens/back_red_runner_v4.gif")));
                    break;
            }
        } else {//gifs do boneco vermelho no sentido direita para esquerda
            switch (nivel) {
                case 1://velocidade um do boneco vermelho
                    bonecoRed.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/imagens/red_runner_v1.gif")));
                    break;
                case 2://velocidade quatro do boneco vermelho
                    bonecoRed.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/imagens/red_runner_v4.gif")));
                    break;
            }
        }
    }

    private void cancelButton() {//método para cancelar a execução da animação
        this.elimina = 0;
        this.green.elimina = false;
        this.red.elimina = false;
        //parar os bonecos
        brown.stop = true;
        green.stop = true;
        red.stop = true;
        //mudando o botão para iniciar
        btStart.setText("Iniciar");
        //move os bonecos para suas posições iniciais
        moveBonecoBrown(0, yBrown);
        moveBonecoGreen(90, yGreen);
        moveBonecoRed(190, yRed);
        //definir as coordenadas dos bonecos
        this.brown.x = bonecoBrown.getX();
        this.brown.y = bonecoBrown.getY();
        this.green.x = bonecoGreen.getX();
        this.green.y = bonecoGreen.getY();
        this.red.x = bonecoRed.getX();
        this.red.y = bonecoRed.getY();
        //escondendo os bonecos
        this.bonecoBrown.setVisible(false);
        this.bonecoGreen.setVisible(false);
        this.bonecoRed.setVisible(false);
        //escondendo as situções dos bonecos
        this.tfSituacaoBrown.setVisible(false);
        this.tfSituacaoGreen.setVisible(false);
        this.tfSituacaoRed.setVisible(false);
        this.lbBrown.setVisible(false);
        this.lbGreen.setVisible(false);
        this.lbRed.setVisible(false);
        //colocando o texto inicial da situção dos bonecos
        this.tfSituacaoBrown.setText("OK");
        this.tfSituacaoGreen.setText("OK");
        this.tfSituacaoRed.setText("OK");
        //cancelando as animações dos bonecos
        this.brown.cancel(true);
        this.green.cancel(true);
        this.red.cancel(true);
        //Gifs iniciais de cada boneco
        this.bonecoBrown.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/imagens/x_runner_v1.gif")));
        this.bonecoGreen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/imagens/green_runner_v1.gif")));
        this.bonecoRed.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/imagens/red_runner_v1.gif")));
        btPlay.setEnabled(false);
        btPlay.setText("Pausar");
        cronometro.cancel();
        clearScreen();//limpa a tela

    }

    private void chooser() {

        JFileChooser chooser = new JFileChooser();// cria um novo seletor
        chooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);//define que o usuário ira apenas poder escolher arquivos
        chooser.setSelectedFile(new File(getClass().getResource("music/beep.mp3").getPath()));
        FileNameExtensionFilter filter = new FileNameExtensionFilter("MP3 Audio", "mp3");//criar um filtro para extensão wav
        chooser.setFileFilter(filter);//coloca o filtro no chooser
        chooser.setAcceptAllFileFilterUsed(false);//desabilita a opção de todos os tipos de arquivos
        int result = chooser.showSaveDialog(null);//cria uma saveDialog
//        File fileOrigin = new File(getClass().getResource("music/beep-2.wav").getPath());

//        File fileDestination = new File(chooser.getSelectedFile(),"beep-2.wav");

        switch (result) {
            case JFileChooser.APPROVE_OPTION:
                try {
                    String p = getClass().getResource("music/beep.mp3").getPath();
                    Path origem = Paths.get(p.substring(1, p.length()));
                    Path destino = Paths.get(chooser.getSelectedFile() + "/beep.mp3");
                    Files.copy(origem, destino);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Erro: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
                    e.printStackTrace();
                }
                return;
            case JFileChooser.CANCEL_OPTION:
                return;
        }

    }

    private void startButton() {//método para iniciar a animação
        //torma visível os bonecos
        this.bonecoBrown.setVisible(true);
        this.bonecoGreen.setVisible(true);
        this.bonecoRed.setVisible(true);
        //torna visível a situação de cada boneco
        this.tfSituacaoBrown.setVisible(true);
        this.tfSituacaoGreen.setVisible(true);
        this.tfSituacaoRed.setVisible(true);
        this.lbBrown.setVisible(true);
        this.lbGreen.setVisible(true);
        this.lbRed.setVisible(true);
        try {
            run();
            cronometro.cronometro(this.tfCronometro);//inicia o cronometro
            btStart.setText("Cancelar");
            btPlay.setEnabled(true);
            this.tfNivel.setText(String.valueOf(nivel));
            this.tfVelocidade.setText(String.valueOf(velocidadeMedia) + " km/h");
        } catch (Exception ex) {
            Logger.getLogger(AnimationShuttleRun.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void eliminaBoneco(int elimina) {//método para eliminar os bonecos
        switch (elimina) {
            case 0:
            case 1:
            case 2:
                break;
            case 3://avisa que o boneco verde está atrasado
                tfSituacaoGreen.setText("Atrasado!");
                break;
            case 4:
                break;
            case 5://elimina o boneco verde
                tfSituacaoGreen.setText("Eliminado!");
                green.elimina = true;
                break;
            case 6://cancela a animação do boneco verde
                green.cancel(true);
                bonecoGreen.setVisible(false);
                break;
            case 7:
                break;
            case 8:
                break;
            case 9://avisa que o boneco vermelho está atrasado
                tfSituacaoRed.setText("Atrasado!");
                break;
            case 10:
                break;
            case 11://elimina o boneco vermelho
                tfSituacaoRed.setText("Eliminado!");
                red.elimina = true;
                break;
            case 12:
                this.bonecoRed.setVisible(false);
                break;
            default://cancela a animação
                this.lbBrown.setVisible(false);
                stopButton();
                JOptionPane.showMessageDialog(null, "O teste continua aumentando 0.5 km/h a cada minuto até o ultimo nível (nível 21) ", "Aviso",
                        JOptionPane.INFORMATION_MESSAGE);
                cancelButton();
                tfDistancia.setText("");
                break;
        }
    }

    private void stopButton() {
        cronometro.stop();
        this.stop = false;
        btPlay.setText("Continuar");
        if (backBrown) {
            bonecoBrown.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/imagens/back_brown.gif")));//imagem do boneco parado sentido anti-horario
        } else {
            bonecoBrown.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/imagens/brown.gif")));//imagem do boneco parado sentido horario
        }
        if (backGreen) {
            bonecoGreen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/imagens/back_green.gif")));
        } else {
            bonecoGreen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/imagens/green.gif")));
        }
        if (backRed) {
            bonecoRed.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/imagens/back_red.gif")));
        } else {
            bonecoRed.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/imagens/red.gif")));
        }
        cronometro.stop();//pausa o cronometro
    }

    private void playButton() {

        this.stop = true;
        btPlay.setText("Pausar");
        velocidadeBonecoBrown(backBrown);
        velocidadeBonecoGreen(backGreen);
        velocidadeBonecoRed(backRed);
        cronometro.start();//continua o cronometro
    }
}

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package visao;

import java.applet.Applet;
import java.applet.AudioClip;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.SwingWorker;
import util.Cronometro;

/**
 *
 * @author 5102011212
 */
public class AnimationAgilidadeEmQuadra extends javax.swing.JFrame {

    private BufferedImage backBuffer;
    boolean parado;
    boolean executando;
    ThreadPausa2 thread;
    private Cronometro cronometro = new Cronometro();

    /**
     * Creates new form Animacao
     */
    public AnimationAgilidadeEmQuadra() {
        initComponents();
        initialiazeComponents();
        this.executando = false;
    }

    public void initialiazeComponents() {
        this.tfCronometro.setVisible(false);
        backBuffer = new BufferedImage(this.getWidth(), this.getHeight(), BufferedImage.TYPE_INT_RGB);
        checkOff();//metodo para esconder os checks 
        sensorOff();//metodo para esconder os sensores
        //evento que sera disparado na hora de fechar o frame
        setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent evt) {
                if (thread != null) {
                    thread.cancel(true);
                }
                if (cronometro != null) {
                    cronometro.setCancel(true);
                    cronometro.cancel();
                }

                setVisible(false);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        lbSensorChegadaDireita = new javax.swing.JLabel();
        lbSensorLargadaEsquerda = new javax.swing.JLabel();
        lbSensorChegadaEsquerda = new javax.swing.JLabel();
        lbSensorLargadaDireita = new javax.swing.JLabel();
        boneco = new javax.swing.JLabel();
        lbCheck1 = new javax.swing.JLabel();
        lbCheck6 = new javax.swing.JLabel();
        lbCheck2 = new javax.swing.JLabel();
        lbCheck3 = new javax.swing.JLabel();
        lbCheck4 = new javax.swing.JLabel();
        lbCheck5 = new javax.swing.JLabel();
        tfCronometro = new javax.swing.JTextField();
        quadra = new javax.swing.JLabel();
        btPlay = new javax.swing.JButton();
        btIniciar = new javax.swing.JButton();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Animação - Agilidade em Quadra");
        setResizable(false);
        getContentPane().setLayout(null);

        lbSensorChegadaDireita.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/imagens/sensor.png")));
        getContentPane().add(lbSensorChegadaDireita);
        lbSensorChegadaDireita.setBounds(375, 35, 30, 30);

        lbSensorLargadaEsquerda.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/imagens/sensor.png")));
        getContentPane().add(lbSensorLargadaEsquerda);
        lbSensorLargadaEsquerda.setBounds(273, 395, 30, 30);

        lbSensorChegadaEsquerda.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/imagens/sensor.png")));
        getContentPane().add(lbSensorChegadaEsquerda);
        lbSensorChegadaEsquerda.setBounds(270, 35, 30, 30);

        lbSensorLargadaDireita.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/imagens/sensor.png")));
        getContentPane().add(lbSensorLargadaDireita);
        lbSensorLargadaDireita.setBounds(375, 395, 30, 30);

        boneco.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        boneco.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/imagens/x_runner_small.gif"))); // NOI18N
        getContentPane().add(boneco);
        boneco.setBounds(300, 310, 60, 80);

        lbCheck1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/imagens/check.png")));
        getContentPane().add(lbCheck1);
        lbCheck1.setBounds(530, 60, 0, 40);

        lbCheck6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/imagens/check.png")));
        getContentPane().add(lbCheck6);
        lbCheck6.setBounds(120, 320, 0, 40);

        lbCheck2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/imagens/check.png")));
        getContentPane().add(lbCheck2);
        lbCheck2.setBounds(530, 210, 0, 40);

        lbCheck3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/imagens/check.png")));
        getContentPane().add(lbCheck3);
        lbCheck3.setBounds(530, 320, 0, 40);

        lbCheck4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/imagens/check.png")));
        getContentPane().add(lbCheck4);
        lbCheck4.setBounds(120, 70, 0, 40);

        lbCheck5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/imagens/check.png")));
        getContentPane().add(lbCheck5);
        lbCheck5.setBounds(120, 210, 0, 40);

        tfCronometro.setEditable(false);
        tfCronometro.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(tfCronometro);
        tfCronometro.setBounds(440, 510, 85, 25);

        quadra.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/imagens/AgilidadeEmQuadra.png")));
        getContentPane().add(quadra);
        quadra.setBounds(0, 0, 660, 500);

        btPlay.setText("Pausar");
        btPlay.setEnabled(false);
        btPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btPlayActionPerformed(evt);
            }
        });
        getContentPane().add(btPlay);
        btPlay.setBounds(260, 510, 160, 25);

        btIniciar.setText("Iniciar");
        btIniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btIniciarActionPerformed(evt);
            }
        });
        getContentPane().add(btIniciar);
        btIniciar.setBounds(80, 510, 160, 25);

        setSize(new java.awt.Dimension(676, 585));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btPlayActionPerformed
        if (executando) {//verificar se esta executando
            this.executando = false;
            btPlay.setText("Continuar");
            parado = true;
            //para o cronometro
            cronometro.stop();

        } else {//verifica se esta pausado
            this.executando = true;
            btPlay.setText("Pausar");
            parado = false;
            cronometro.start();
        }
    }//GEN-LAST:event_btPlayActionPerformed

    private void btIniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btIniciarActionPerformed
        if (btIniciar.getText().equalsIgnoreCase("Iniciar")) {//verifica se é para iniciar
            this.tfCronometro.setVisible(true);
            boneco.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/imagens/x_runner_small.gif")));
            parado = false;
            executando = true;
            try {
                run();//metodo para executar a animação
                if (cronometro.getCancel()) {//verifica se a execusão foi feita até o fim
                    cronometro.cancel();//cancela o cronometro
                }
                cronometro.cronometro(this.tfCronometro);
            } catch (Exception ex) {
                Logger.getLogger(AnimationAgilidadeEmQuadra.class.getName()).log(Level.SEVERE, null, ex);
            }
            btIniciar.setText("Cancelar");
            btPlay.setEnabled(true);
        } else {//se não for iniciar então ele cancela
            this.tfCronometro.setVisible(false);
            boneco.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/imagens/parado.gif")));
            thread.cancel(true);
            this.atualizaInterface(300, 420, false);
            checkOff();
            sensorOff();
            //cancela o cronometro
            cronometro.cancel();
        }
    }//GEN-LAST:event_btIniciarActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel boneco;
    private javax.swing.JButton btIniciar;
    private javax.swing.JButton btPlay;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel lbCheck1;
    private javax.swing.JLabel lbCheck2;
    private javax.swing.JLabel lbCheck3;
    private javax.swing.JLabel lbCheck4;
    private javax.swing.JLabel lbCheck5;
    private javax.swing.JLabel lbCheck6;
    private javax.swing.JLabel lbSensorChegadaDireita;
    private javax.swing.JLabel lbSensorChegadaEsquerda;
    private javax.swing.JLabel lbSensorLargadaDireita;
    private javax.swing.JLabel lbSensorLargadaEsquerda;
    private javax.swing.JLabel quadra;
    private javax.swing.JTextField tfCronometro;
    // End of variables declaration//GEN-END:variables

    private void moveBoneco(int x, int y) {// metodo que move o boneco
        boneco.setBounds(x, y, boneco.getWidth(), boneco.getHeight());
    }
    int x;
    int y;

    public void run() throws Exception {// metodo que executa a animação
        executando = true;
        x = boneco.getX();//posição x do boneco
        y = boneco.getY();//posição y do boneco


        thread = new ThreadPausa2(this, x, y);
        if (thread.getState().equals(SwingWorker.StateValue.DONE)) {
            try {
                thread.run();
            } catch (Exception ex) {
            }
        } else if (thread.getState().equals(SwingWorker.StateValue.PENDING)) {
            thread.execute();//inicia o movimento do boneco
        }
    }

    public boolean atualizaInterface(int xis, int ipslon, boolean back) {//metodo para atualizar a posição do boneco na interface
        moveBoneco(xis, ipslon);// metodo para move o boneco
        if (!this.executando) {//verifica se o boneco está parado
            if (back) {//verifica se o boneco esta correndo no sentido horário
                boneco.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/imagens/parado_back.gif")));//imagem do boneco sentido horário
            } else {//verifica se o boneco está correndo no sentido anti horário
                boneco.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/imagens/parado.gif")));//imagem do boneco sentido anti horário
            }
        } else {//verifica se o boneco esta se moveno
            if (back) {//verifica se o boneco esta correndo no sentido horário
                boneco.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/imagens/back_x_runner_small.gif")));//gif do boneco sentido horário
            } else {//verifica se o boneco está correndo no sentido anti horário
                boneco.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/imagens/x_runner_small.gif")));//gif do boneco sentido anti horário
            }
        }
        if (xis == 300 && ipslon == 420) {// posição inicial do boneco
            boneco.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visao/imagens/parado.gif")));// imagem do boneco
            this.btIniciar.setText("Iniciar");
            executando = false;
            parado = true;
            cronometro.cancel();
            btPlay.setText("Pausar");
            btPlay.setEnabled(false);
            sensorOff();//método para esconder os sensores de largada e chegada

        }

        if (xis == 300 && ipslon == 340) {//posição do sensor de largada
            sensorLargadaOn();//método para mostrar os sensores de largada
            cronometro.setCancel(false);
        }
        if (ipslon == 40 || ipslon < 40) {// posição do sensor de chegada
            cronometro.setCancel(true);
            sensorChegadaOn();//método para mostrar os sensores de chegada
        }
        return this.executando;
    }

    public void checkOff() {// método para para esconder os checks de cada  posição
        lbCheck6.setVisible(false);
        lbCheck1.setVisible(false);
        lbCheck2.setVisible(false);
        lbCheck3.setVisible(false);
        lbCheck4.setVisible(false);
        lbCheck5.setVisible(false);
    }

    public void checkOn(int qual) {// metodo para mostrar os checks de cada posição
        switch (qual) {
            case 1:
                lbCheck1.setVisible(true);// abilita o check da primeira posição
                break;
            case 2:
                lbCheck2.setVisible(true);// abilita o check da segunda posição
                break;
            case 3:
                lbCheck3.setVisible(true);// abilita o check da terceira posição
                break;
            case 4:
                lbCheck4.setVisible(true);// abilita o check da quarta posição
                break;
            case 5:
                lbCheck5.setVisible(true);// abilita o check da quinta posição
                break;
            case 6:
                lbCheck6.setVisible(true);// abilita o check da sexta posição
                break;


        }
    }

    private void sensorOff() {// metodo para esconder os sensores
        lbSensorChegadaDireita.setVisible(false);
        lbSensorChegadaEsquerda.setVisible(false);
        lbSensorLargadaDireita.setVisible(false);
        lbSensorLargadaEsquerda.setVisible(false);
    }

    private void sensorLargadaOn() {// metodo para mostrar os sensores de largada
        //beep();
        lbSensorLargadaDireita.setVisible(true);
        lbSensorLargadaEsquerda.setVisible(true);
    }

    private void sensorChegadaOn() {// metodo para mostrar os sensores de chegada
        //beep();
        lbSensorChegadaDireita.setVisible(true);
        lbSensorChegadaEsquerda.setVisible(true);
    }

    private void beep() {
        try {
            File file = new File("visao/audio/beep-2.wav");
            AudioClip clip = Applet.newAudioClip(file.toURI().toURL());
            clip.play();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}

class ThreadPausa2 extends SwingWorker<Void, Void> {//classe para fazer o movimento do boneco

    AnimationAgilidadeEmQuadra animacao;
    int x;//variavel referente a posição x do boneco no plano cartesiano
    int y;//variavel referente a posição y do boneco no plano cartesiano
    int velocidade = 1000 / 15;//variavel para a velocidade em que o boneco vai se mover
    double initialTime, previousTime = 0, showTime;//variaveis de tempo inicial, tempo anterior e tempo a ser mostrado

    public ThreadPausa2(AnimationAgilidadeEmQuadra tp, int x, int y) {
        this.animacao = tp;
        this.x = x;
        this.y = y;
    }

    @Override
    protected Void doInBackground() throws Exception {// metodo do movimento do boneco
        //inicio ao centro
        while (this.y > 230) {
            this.y -= 10;
            do {
                Thread.sleep(velocidade);//tempo de espera
            } while (!animacao.atualizaInterface(x, y, false));// verifca se a animção foi parada e atualiza a interface
        }
        // centro ao 1
        while (y > 70) {
            y -= 10;
            x += 12;
            do {
                Thread.sleep(velocidade);//tempo de espera
            } while (!animacao.atualizaInterface(x, y, false));// verifca se a animção foi parada e atualiza a interface
        }
        animacao.checkOn(1);//metodo que mostra um check conforme o valor passado como parametro
        //1 ao centro
        while (y < 230) {
            y += 10;
            x -= 12;
            do {
                Thread.sleep(velocidade);//tempo de espera
            } while (!animacao.atualizaInterface(x, y, true));// verifca se a animção foi parada e atualiza a interface
        }
        //centro ao 2
        while (x < 490) {
            x += 10;
            do {
                Thread.sleep(velocidade);//tempo de espera
            } while (!animacao.atualizaInterface(x, y, false));// verifca se a animção foi parada e atualiza a interface
        }
        animacao.checkOn(2);//metodo que mostra um check conforme o valor passado como parametro
        //2 ao centro
        while (x > 300) {
            x -= 10;
            do {
                Thread.sleep(velocidade);//tempo de espera
            } while (!animacao.atualizaInterface(x, y, true));// verifca se a animção foi parada e atualiza a interface
        }
        //centro ao 3
        while (x < 500) {
            x += 10;
            y += 5;
            do {
                Thread.sleep(velocidade);//tempo de espera
            } while (!animacao.atualizaInterface(x, y, false));// verifca se a animção foi parada e atualiza a interface
        }
        animacao.checkOn(3);//metodo que mostra um check conforme o valor passado como parametro
        // 3 ao centro
        while (y > 230) {
            x -= 10;
            y -= 5;
            do {
                Thread.sleep(velocidade);//tempo de espera
            } while (!animacao.atualizaInterface(x, y, true));// verifca se a animção foi parada e atualiza a interface
        }
        //centro ao 4
        while (x > 120) {
            y -= 10;
            x -= 12;
            do {
                Thread.sleep(velocidade);//tempo de espera
            } while (!animacao.atualizaInterface(x, y, true));// verifca se a animção foi parada e atualiza a interface
        }
        animacao.checkOn(4);//metodo que mostra um check conforme o valor passado como parametro
        //4 ao centro
        while (x < 300) {
            y += 10;
            x += 12;
            do {
                Thread.sleep(velocidade);//tempo de espera
            } while (!animacao.atualizaInterface(x, y, false));// verifca se a animção foi parada e atualiza a interface
        }
        //centro ao 5
        while (x > 120) {
            x -= 12;
            do {
                Thread.sleep(velocidade);//tempo de espera
            } while (!animacao.atualizaInterface(x, y, true));// verifca se a animção foi parada e atualiza a interface
        }
        animacao.checkOn(5);//metodo que mostra um check conforme o valor passado como parametro
        //5 ao centro
        while (x < 300) {
            x += 12;
            do {
                Thread.sleep(velocidade);//tempo de espera
            } while (!animacao.atualizaInterface(x, y, false));// verifca se a animção foi parada e atualiza a interface
        }
        //centro ao 6
        while (x > 120) {
            x -= 10;
            y += 5;
            do {
                Thread.sleep(velocidade);//tempo de espera
            } while (!animacao.atualizaInterface(x, y, true));// verifca se a animção foi parada e atualiza a interface
        }
        animacao.checkOn(6);//metodo que mostra um check conforme o valor passado como parametro
        //6 ao centro
        while (x < 300) {
            x += 10;
            y -= 5;
            do {
                Thread.sleep(velocidade);//tempo de espera
            } while (!animacao.atualizaInterface(x, y, false));// verifca se a animção foi parada e atualiza a interface
        }
        //centro ao final
        while (y > 10) {
            y -= 10;
            do {
                Thread.sleep(velocidade);//tempo de espera
            } while (!animacao.atualizaInterface(x, y, false));// verifca se a animção foi parada e atualiza a interface
        }
        animacao.checkOff();//metodo para esconder os checks
        animacao.atualizaInterface(300, 420, false);//atualizando a interface com a posição x e y e também um valor boleano para verificar direção em que o boneco deve correr
        return null;
    }
}
